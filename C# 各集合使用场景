推荐使用场景
 https://www.cnblogs.com/jesse2013/p/CollectionsInCSharp.html

集合

顺序排列

连顺存储

直接访问方式

访问时间

操作时间

备注

Dictionary

 

是

Key

Key:

O(1)

 

O(1)

访问性能最快，不支持排序

SortedDinctionary

顺序排列

否

Key

Key: 
O(log n)

O(log n)

快速访问和支持排序的折衷

SortedList

顺序排列

是

Key

Key:

O(log n)

 

O(n)

和SortedDictionary相似，只是内部用数据替代树作为存储结构。

List

使用者可以精确控制元素的位置

是

Index

Index: O(1)

Value: O(n)

 

O(n)

最适合需要直接访问每一个元素的少量集合。

LinkedList

使用者可以精确控制元素的位置

否

不支持

Value:

O(n)

 

O(1)

最适合不需要直接访问单个元素，但是在集合中添加/移除非常频繁的场景。

HashSet

不支持

是

Key

Key:

O(1)

 

O(1)

能保持元素唯一性的集合。不支持排序

SortedSet

顺序排列

否

Key

Key:

O(log n)

 

O(log n)

能保持元素唯一性并且支持排序。

Stack

LIFO

是

只能获取顶部元素

Top: O(1)

O(1)

 

Queue

FIFO

是

只能获底部元素

Front: O(1)

O(1)

 
